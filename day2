'''chap2 조건문'''

x = 15
if x>=10 :
  print(x)

  
score = 85

if score >= 90 : 
  print("grade : A")
elif score >=80 :
  print("B")
elif score >= 70:
  print("C")
else:
  print("F")

# pass : later to do

score = 85

if score >= 85: 
  pass
else: 
  print('under 80')

print('exit the program')

if score >= 80: result = "Success"
else: result = "Fail"

print(result)

#conditional Expression(조건부 표현식)

result = "Success" if score >= 80 else "Fail"
print(result)

a = [1,2,3,4,5,5,5]
remove_set = {3,5}

result = []
for i in a :
  if i not in remove_set:
    result.append(i)

print(result)

a = [1,2,3,4,5,5,5]
remove_set = {3,5}

result = [i for i in a if i not in remove_set]
print(result)

'''chp3 loop '''

#while

i = 1
result = 0

while i <=9 :
  result += i
  i += 1 #i++ 안되네

print(result)


i = 1
result = 0

while i <=9 :
  if i % 2 == 1 :
    result += i
  i += 1 #i++ 안되네

print(result)

#for

result = 0

for i in range(1,10):
  result += i

print(result)

scores = [90, 85, 77, 65, 97]

for i in range(5):
  if scores[i] >= 80:
    print("No.:",i+1,"student is passed")

scores = [90, 85, 77, 65, 97]
black_list = {2,4}

#continue : comback to loop's startline
##break : breaking loop (finished)
for i in range(5):
  if i+1 in black_list:
    continue
  if scores[i] >=80:
    print("No.:",i+1,"student is passed")

'''
#2 demi
for i in range(2,10):
  for j in range(1,10):
    print(i,"X",j,"=",i*j)
'''

'''ch4 func'''

def add(a,b):
  return a+b

print(add(3,7))

def add2(a,b):
  print('result: ', a+b)

add2(3,7)

def add3(a,b):
  print('result: ', a+b)

add3(b=7,a=6)

#global ; can get var from outside

a = 0

def func():
  global a
  a += 1

for i in range(11):
  func() # func 11(0~9)번 실행됨
  
print(a)

#lambda express ;using in sorting as a key

print((lambda a, b: a+b)(3,7))


'''ch5 input&output'''

#list(map(int,input().split()))
'''
n = int(input())

data = list(map(int, input().split()))

data.sort(reverse = True)
print("ascending :",data)
print("number of data:", n)


#data 많지 않으면,

n, m, k = map(int, input().split())

print(n,m,k)

# 입력할 데이터가 매우 크다면 X input() >> sys.stdin.readline()
# 한줄 씩 입력받음

import sys
data = sys.stdin.readline().rstrip() #cuz Enter, R에 공백발생
print(data)
'''
#print ; change the line after prinitng

a = 1
b =3
print(a)
print(b)

#str ; num to char

answer = 7
print("the answer is " + str(answer) + "!!")

#f-string(over python 3.6)

answer = 8
print(f"the answer is {answer}!!")

'''chap6 important libraries
1. 내장
2. itertools
3. heapq
4. bisect
5. collections(deque, counter) 
6. math'''

#no.1 can use without 'import'
#input, print,sum,min,max,eval,sorted

result = sum([1,2,3,4,5])
print(result)

result = min(7,3,5,2)
print(result)

result = max(11,0,4,5)
print(result)

re=eval("(6/3)*7")#char 수식 계산결과 반환
print(re)

result = sorted([9, 1, 8, 5, 4])
print(result)

result = sorted([9, 1, 8, 5, 4],reverse=True)
print(result)

result = sorted((9, 1, 8, 5, 4))#??
print(result)

result = sorted([('hongglidong',35),('amugei',50),('leesoonsin',75)],key = lambda x: x[1], reverse = True)
print(result)

data = [0,1,8,5,4]
data.sort()
print(data)

#no.2 itertools ; 반복되는 데이터 처리
#Class : permutations(순열), combinations(조합),product(중복순열),combinations_with_replacement(중복조합)

from itertools import permutations

data = ['A','B','C']
result = list(permutations(data,3))
print(result)#3개 뽑아 일렬 나열하는 모든 경우의 수

from itertools import combinations

data = ['A','B','C']
result = list(combinations(data,2))
print(result)#2개 뽑는 x순서 경우의 수

from itertools import product

data = ['A','B','C']
result = list(product(data,repeat=2))
print(result)#중복고려 2개 뽑아 나열(순서o)

from itertools import combinations_with_replacement

data = ['A','B','C']
result = list(combinations_with_replacement(data,2))
print(result)

#no.3 heapq ; 우선순위큐 구현/minheap
#minheap; 힙에 원소 전부 넣고 빼면 O(nlongn)
#method: heapq.heappush(), heapq.heappop()

import heapq

#heap sort
def heapsort(iterable):
  h = []
  result = []

  for value in iterable:
    heapq.heappush(h, value)

  for i in range(len(h)):
    result.append(heapq.heappop(h))
  
  return result

result = heapsort([1,3,5,7,9,2,4,6,8,0])
print(result)

#max heapsort; 원소 부호 바꿔서 삽입, 추출 후 재변경

import heapq

def heapsort(iterable):
  h = []
  result = []

  for value in iterable:
    heapq.heappush(h, -value)#-삽입

  for i in range(len(h)):
    result.append(-heapq.heappop(h))#+로 변경됨
  
  return result

result = heapsort([1,3,5,7,9,2,4,6,8,0])
print(result)

#no.4 bisect ; 이진탐색
#정렬된 배열에서 특정한 원소 탐색
#func: bisect_left(), bisect_right() : O(logn)

from bisect import bisect_left, bisect_right

a = [1,2,4,4,8]
x =4

print(bisect_left(a,x))
print(bisect_right(a,x)) #return index value

#Q; 함수, 매서드, 클래스에 따라 라이브러리 삽입 방법이 다름??

from bisect import bisect_left, bisect_right

#return no.[left_value, right_value]
def count_by_range(a, left_value, right_value):
  #a에서 right_value가 들어갈 인덱스 반환(기준 right)
  right_index = bisect_right(a, right_value)
  left_index = bisect_left(a, left_value)
  #return no.(left to right_index)
  return right_index - left_index

a = [1,2,3,3,3,3,4,4,8,9]

print(count_by_range(a, 4,4))# 값이 4인 데이터 개수
print(count_by_range(a, -1,3))#값이 -1~3인 데이터 개수

#no.4 collections ; data_structure
#Class : deque, count_by_range

#deque ; popleft(),pop()//appendleft(),append()

from collections import deque

data = deque([2,3,4])
data.appendleft(1)
data.append(5)

print(data)
print(list(data))#trans list type

#counter ; no.등장횟수

from collections import Counter

counter = Counter(['red','blue','red', 'green','blue','blue'])

print(counter['blue'])
print(counter['green'])
print(dict(counter)) #trans dict dtype

#no.5 math ; factorial(x), sqrt(x), 
#gcd(a,b);최대공약수, math.pi, math.e

import math

print("5! = ", math.factorial(5))
print("root 7 = ", math.sqrt(7))
print("21과 14의 G = ", math.gcd(21,14))
print("pie = ", math.pi)
print("e = ", math.e)

    
